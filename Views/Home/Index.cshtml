@{
    ViewData["Title"] = "Home Page";
}

<div class="home-container">

    <h1 class="home-titulo titulo">AstroGenerator</h1>

    <p class="home-paragrafo paragrafo">Use AstroGenerator to explore and learn about different astronomical topics.
        Insert TAGs, base texts and references, click 'Generate' and instantly get questions and answers generated.
        Uncover the secrets of the universe in a practical and intuitive way.</p>

    <div class="home-inputBox">
        <input class="home-input input" type="text" id="textoEntrada">
        <button type="button" class="home-botao botao" onclick="enviarFormulario()">Generate</button>
    </div>

</div>

<div class="home-status">
    <div class="home-statusBox">    
        <p class="home-paragrafo paragrafo" id="paragrafoStatus"><strong>Status</strong> This is where the status of the generated question will appear.</p>
    </div>
</div>


@* <div class="home-questao">
    <div class="home-enunciado">
        <h4 class="home-titulo titulo">Astronomy Question</h4>
        <p class="home-paragrafo questao-paragrafo paragrafo">This is where the generated question about the
            astronomical topic will appear.
        </p>
    </div>
    <div class="home-alternativas alternativas">
        <button class="alternativa">option 1</button>
        <button class="alternativa">option 2</button>
        <button class="alternativa">option 3</button>
        <button class="alternativa">option 4</button>
    </div>
</div> *@



<script>

let intervalId; // Variável para armazenar o ID do intervalo

function consultarPergunta(requisicaoId) {
    fetch(`http://localhost:5084/api/Requisicoes/ConsultarPergunta?id=${requisicaoId}`, {
        method: "GET"
    })
    .then(function (response) {
        if (response.ok) {
            return response.json();
        } else {
            throw new Error("Consulta de pergunta falhou");
        }
    })
    .then(function (pergunta) {
        // Atualizar o conteúdo do elemento HTML com as informações da pergunta
        var divPergunta = document.createElement("div");
        divPergunta.className = "home-questao";

        var divEnunciado = document.createElement("div");
        divEnunciado.className = "home-enunciado";

        var h4Titulo = document.createElement("h4");
        h4Titulo.className = "home-titulo titulo";
        h4Titulo.textContent = "Astronomy Question";

        var pParagrafo = document.createElement("p");
        pParagrafo.className = "home-paragrafo questao-paragrafo paragrafo";
        pParagrafo.textContent = pergunta.conteudo;

        divEnunciado.appendChild(h4Titulo);
        divEnunciado.appendChild(pParagrafo);

        var divAlternativas = document.createElement("div");
        divAlternativas.className = "home-alternativas alternativas";

        pergunta.respostas.forEach(function (resposta, index) {
            var buttonAlternativa = document.createElement("button");
            buttonAlternativa.className = "alternativa";
            buttonAlternativa.textContent = resposta.conteudo;
            // Adicione um evento de clique para processar a resposta
            @* buttonAlternativa.onclick = function () {
                processarResposta(resposta);
            }; *@

      // Atribuir um identificador único (id) a cada botão
    var alternativaId = `alternativa_${index}`;
    buttonAlternativa.id = alternativaId;

    // Adicione um evento de clique para processar a resposta
    buttonAlternativa.onclick = function () {
        processarResposta(resposta, alternativaId);
    };
            divAlternativas.appendChild(buttonAlternativa);
        });

        divPergunta.appendChild(divEnunciado);
        divPergunta.appendChild(divAlternativas);

        // Substituir o conteúdo anterior pelo novo
        var paragrafoStatus = document.getElementById("paragrafoStatus");
        paragrafoStatus.innerHTML = "";
        paragrafoStatus.appendChild(divPergunta);
    })
    .catch(function (error) {
        // Lógica para lidar com erros na consulta de pergunta
        alert("Ocorreu um erro na consulta de pergunta: " + error.message);
    });
}

function processarResposta(resposta, alternativaId) {
    var formData = new FormData();
    formData.append('IdPergunta', resposta.perguntaId);
    formData.append('IdResposta', resposta.id);

    fetch('http://localhost:5084/api/Requisicoes/ResponderPergunta', {
        method: 'POST',
        body: formData,
    })
    .then(response => response.json())
    .then(data => {
        // Verificar se a resposta é verdadeira ou falsa
        var mensagem = data ? 'Resposta correta!' : 'Resposta incorreta!';
        alert(mensagem);

        // Obter o botão de alternativa pelo id e aplicar o estilo correspondente
        var botaoAlternativa = document.getElementById(alternativaId);
        if (data) {
            // Resposta correta (verde)
            botaoAlternativa.style.backgroundColor = 'green';
            botaoAlternativa.style.color = 'white';

            // Desabilitar outros botões
            desabilitarBotoesAlternativa();
        } else {
            // Resposta incorreta (vermelho)
            botaoAlternativa.style.backgroundColor = 'red';
            botaoAlternativa.style.color = 'white';
        }
    })
    .catch(error => {
        alert('Ocorreu um erro ao enviar a resposta: ' + error.message);
    });
}

function desabilitarBotoesAlternativa() {
    // Obter todos os botões de alternativa
    var botoesAlternativa = document.getElementsByClassName("alternativa");

    // Iterar sobre os botões e desabilitar
    for (var i = 0; i < botoesAlternativa.length; i++) {
        botoesAlternativa[i].disabled = true;
    }
}


// Função para consultar a requisição
function consultarRequisicao(idRequisicao) {
    fetch(`http://localhost:5084/api/Requisicoes/ConsultarRequisicao?id=${idRequisicao}`, {
        method: "GET"
    })
    .then(function (response) {
        if (response.ok) {
            return response.json();
        } else {
            throw new Error("Consulta de requisição falhou");
        }
    })
    .then(function (requisicao) {
        // Formatar a data para exibição amigável
        var dataInicioFormatada = new Date(requisicao.dataInicio).toLocaleString();

        // Limpar o intervalo anterior antes de iniciar um novo
        clearInterval(intervalId);

        // Atualizar o conteúdo do elemento p com as informações recebidas
        var paragrafoStatus = document.getElementById("paragrafoStatus");

        if (requisicao.status === 11) {
            // Se o status for 11, chamar a função para consultar a pergunta
            consultarPergunta(idRequisicao);
        } else {
            // Se o status não for 11, exibir as informações padrão
            paragrafoStatus.innerHTML = `
                <strong>Dados da Requisição:</strong><br>
                ID: ${requisicao.id}<br>
                Status: ${requisicao.status}<br>
                Data Início: ${dataInicioFormatada}<br>
                Data Fim: ${requisicao.dataFim}<br>
                Validade: ${requisicao.valided ? 'Sim' : 'Não'}
            `;

            // Criar o botão "Consultar"
            var botaoConsultar = document.createElement("button");
            botaoConsultar.type = "button";
            botaoConsultar.className = "home-botao botao";
            botaoConsultar.textContent = "Consultar";
            botaoConsultar.onclick = function() {
                consultarRequisicao(idRequisicao);
            };

            // Adicionar o botão ao parágrafo
            paragrafoStatus.appendChild(botaoConsultar);

            // Iniciar o intervalo a cada 5 segundos
            intervalId = setInterval(function () {
                consultarRequisicao(idRequisicao);
            }, 5000); // 5000 milissegundos = 5 segundos
        }
    })
    .catch(function (error) {
        // Lógica para lidar com erros na consulta de requisição
        alert("Ocorreu um erro na consulta de requisição: " + error.message);
    });
}

// Função para enviar o formulário
function enviarFormulario() {
    // Obter o valor do campo do formulário
    var textoEntrada = document.getElementById("textoEntrada").value;

    // Criar um objeto FormData
    var formData = new FormData();
    formData.append('textoEntrada', textoEntrada);

    fetch("http://localhost:5084/api/Requisicoes/IniciarRequisicao", {
        method: "POST",
        body: formData
    })
    .then(function (response) {
        if (response.ok) {
            return response.text();
        } else {
            throw new Error("Requisição falhou");
        }
    })
    .then(function (idRequisicao) {
        // Remover aspas do início e do fim da string (se existirem)
        idRequisicao = idRequisicao.replace(/^"(.*)"$/, "$1");

        // Chamar a função para consultar a requisição
        consultarRequisicao(idRequisicao);
    })
    .catch(function (error) {
        // Alterar o conteúdo do elemento p em caso de erro
        document.getElementById("paragrafoStatus").innerHTML = `<strong>Erro na requisição:</strong> ${error.message}`;
    });
}

</script>
